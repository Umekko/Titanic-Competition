{"metadata":{"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":3136,"databundleVersionId":26502,"sourceType":"competition"},{"sourceId":9437508,"sourceType":"datasetVersion","datasetId":5734582}],"dockerImageVersionId":30761,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/umekko/titanic-competition?scriptVersionId=198693539\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"markdown","source":"##  **Titanic ML competition** ","metadata":{}},{"cell_type":"markdown","source":"On April 15, 1912, during her maiden voyage, the widely considered `“unsinkable”` RMS Titanic sank after colliding with an iceberg. Unfortunately, there weren’t enough lifeboats for everyone onboard, resulting in the death of 1502 out of 2224 passengers and crew.\n\nWhile there was some element of luck involved in surviving, it seems some groups of people were more likely to survive than others.\n\nOur main question is “what sorts of people were more likely to survive?”\n\nIn this notebook we will use machine learning to create a model that predicts which passengers survived the Titanic shipwreck.","metadata":{}},{"cell_type":"markdown","source":"###  Information about dataset\n\nThe data has been split into two groups:\n\n* training set (train.csv)\n* test set (test.csv)\n\n##### Data Dictionary\n\n| **Variable**   | **Definition** |\n| -------- | ------- |\n| survival  | Survival    |\n| pclass | Ticket class     |\n| sex    | Sex    |\n| Age    | Age in years    |\n| sibsp    | # of siblings / spouses aboard the Titanic\t    |\n| parch    | # of parents / children aboard the Titanic\t   |\n| ticket    | Ticket number    |\n| fare    | Passenger fare    |\n| cabin    | Cabin number   |\n| embarked    | Port of Embarkation   | ","metadata":{}},{"cell_type":"code","source":"# First of all I will start by importing libraries that I'll use\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing\nimport matplotlib.pyplot as plt  #  library for visualizations \nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import StandardScaler, OrdinalEncoder, OneHotEncoder\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import cross_val_score","metadata":{"execution":{"iopub.status.busy":"2024-09-28T19:52:05.012717Z","iopub.execute_input":"2024-09-28T19:52:05.013586Z","iopub.status.idle":"2024-09-28T19:52:05.021195Z","shell.execute_reply.started":"2024-09-28T19:52:05.013526Z","shell.execute_reply":"2024-09-28T19:52:05.020007Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Optuna is an automatic hyperparameter optimization software framework.\n\n!pip install --quiet optuna","metadata":{"execution":{"iopub.status.busy":"2024-09-28T19:52:05.023458Z","iopub.execute_input":"2024-09-28T19:52:05.024363Z","iopub.status.idle":"2024-09-28T19:52:19.589302Z","shell.execute_reply.started":"2024-09-28T19:52:05.024309Z","shell.execute_reply":"2024-09-28T19:52:19.587582Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import optuna\noptuna.__version__","metadata":{"execution":{"iopub.status.busy":"2024-09-28T19:52:19.591289Z","iopub.execute_input":"2024-09-28T19:52:19.591728Z","iopub.status.idle":"2024-09-28T19:52:19.601251Z","shell.execute_reply.started":"2024-09-28T19:52:19.591686Z","shell.execute_reply":"2024-09-28T19:52:19.59982Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# import our data\n\ndf = pd.read_csv('/kaggle/input/titanic/train.csv')\ndf.head(10)","metadata":{"execution":{"iopub.status.busy":"2024-09-28T19:52:19.602673Z","iopub.execute_input":"2024-09-28T19:52:19.603076Z","iopub.status.idle":"2024-09-28T19:52:19.658408Z","shell.execute_reply.started":"2024-09-28T19:52:19.603038Z","shell.execute_reply":"2024-09-28T19:52:19.657251Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# getting information about dataset\n\ndf.info()","metadata":{"execution":{"iopub.status.busy":"2024-09-28T19:52:19.661402Z","iopub.execute_input":"2024-09-28T19:52:19.661782Z","iopub.status.idle":"2024-09-28T19:52:19.689022Z","shell.execute_reply.started":"2024-09-28T19:52:19.661744Z","shell.execute_reply":"2024-09-28T19:52:19.687658Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"This method is necessary to display the data types as well as the amount of data in each column","metadata":{}},{"cell_type":"code","source":"# counting the number of missing values.\n\ndf.isna().sum()","metadata":{"execution":{"iopub.status.busy":"2024-09-28T19:52:19.690687Z","iopub.execute_input":"2024-09-28T19:52:19.691198Z","iopub.status.idle":"2024-09-28T19:52:19.701819Z","shell.execute_reply.started":"2024-09-28T19:52:19.691125Z","shell.execute_reply":"2024-09-28T19:52:19.700329Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# generate descriptive statistics\n\ndf.describe()","metadata":{"execution":{"iopub.status.busy":"2024-09-28T19:52:19.703396Z","iopub.execute_input":"2024-09-28T19:52:19.704579Z","iopub.status.idle":"2024-09-28T19:52:19.741474Z","shell.execute_reply.started":"2024-09-28T19:52:19.704526Z","shell.execute_reply":"2024-09-28T19:52:19.740247Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"From the data above, we can analyze our data and understand if there are outliers","metadata":{}},{"cell_type":"code","source":"# Deleting columns that we won't use in our analyze\n\ndf = df.drop(['PassengerId', 'Name', 'Ticket','Cabin'], axis=1)","metadata":{"execution":{"iopub.status.busy":"2024-09-28T19:52:19.743893Z","iopub.execute_input":"2024-09-28T19:52:19.744406Z","iopub.status.idle":"2024-09-28T19:52:19.753561Z","shell.execute_reply.started":"2024-09-28T19:52:19.744345Z","shell.execute_reply":"2024-09-28T19:52:19.751745Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# counting missing values \n\ndf.isna().sum()","metadata":{"execution":{"iopub.status.busy":"2024-09-28T19:52:19.755422Z","iopub.execute_input":"2024-09-28T19:52:19.756664Z","iopub.status.idle":"2024-09-28T19:52:19.767818Z","shell.execute_reply.started":"2024-09-28T19:52:19.756595Z","shell.execute_reply":"2024-09-28T19:52:19.766666Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# filling missing values in Age column by median \n\ndf['Age'] = df['Age'].fillna(df['Age'].median())\ndf.isna().sum()","metadata":{"execution":{"iopub.status.busy":"2024-09-28T19:52:19.769446Z","iopub.execute_input":"2024-09-28T19:52:19.769812Z","iopub.status.idle":"2024-09-28T19:52:19.78561Z","shell.execute_reply.started":"2024-09-28T19:52:19.769776Z","shell.execute_reply":"2024-09-28T19:52:19.783928Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# visualization \"Embarked\" column\n\ndf['Embarked'].value_counts().plot.pie()","metadata":{"execution":{"iopub.status.busy":"2024-09-28T19:52:19.78939Z","iopub.execute_input":"2024-09-28T19:52:19.789781Z","iopub.status.idle":"2024-09-28T19:52:20.000624Z","shell.execute_reply.started":"2024-09-28T19:52:19.789743Z","shell.execute_reply":"2024-09-28T19:52:19.999373Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# filling missing value with most popular value in column\n\ndf['Embarked'] = df['Embarked'].fillna('S')\ndf.isna().sum()","metadata":{"execution":{"iopub.status.busy":"2024-09-28T19:52:20.002356Z","iopub.execute_input":"2024-09-28T19:52:20.004054Z","iopub.status.idle":"2024-09-28T19:52:20.027544Z","shell.execute_reply.started":"2024-09-28T19:52:20.004Z","shell.execute_reply":"2024-09-28T19:52:20.026291Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# analyzing duplicates\n\ndf.duplicated().sum()","metadata":{"execution":{"iopub.status.busy":"2024-09-28T19:52:20.029193Z","iopub.execute_input":"2024-09-28T19:52:20.030671Z","iopub.status.idle":"2024-09-28T19:52:20.048724Z","shell.execute_reply.started":"2024-09-28T19:52:20.030618Z","shell.execute_reply":"2024-09-28T19:52:20.047551Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# deleting duplicate rows\n\ndf = df.drop_duplicates().reset_index(drop=True)\ndf.duplicated().sum()\n","metadata":{"execution":{"iopub.status.busy":"2024-09-28T19:52:20.052921Z","iopub.execute_input":"2024-09-28T19:52:20.053705Z","iopub.status.idle":"2024-09-28T19:52:20.067866Z","shell.execute_reply.started":"2024-09-28T19:52:20.053651Z","shell.execute_reply":"2024-09-28T19:52:20.066513Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# identify features and target \n\nX = df.drop('Survived', axis = 1)\ny = df['Survived']","metadata":{"execution":{"iopub.status.busy":"2024-09-28T19:52:20.070107Z","iopub.execute_input":"2024-09-28T19:52:20.070609Z","iopub.status.idle":"2024-09-28T19:52:20.077174Z","shell.execute_reply.started":"2024-09-28T19:52:20.070558Z","shell.execute_reply":"2024-09-28T19:52:20.076062Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# preprocessing transformers definition\n\ncategorical = ['Sex', 'Embarked']\nnumerical = ['Pclass','Age','SibSp','Parch','Fare']\n\ntree_transformer = ColumnTransformer(\n    [\n        ('cat_feature', OrdinalEncoder(handle_unknown='use_encoded_value',unknown_value = -1 ), categorical)\n    ], remainder = 'passthrough'\n)\n\nline_transformer = ColumnTransformer(\n    [\n        ('cat_feature', OneHotEncoder(handle_unknown='ignore',drop = 'first'), categorical),\n        ('num_feature', StandardScaler(), numerical)\n    ]\n)\n\n\nknn_transformer = ColumnTransformer(\n    [\n        ('cat_feature', OneHotEncoder(handle_unknown='ignore', drop = 'first'), categorical),\n        ('num_feature', StandardScaler(), numerical)\n    ]\n)\n\n","metadata":{"execution":{"iopub.status.busy":"2024-09-28T19:52:41.076179Z","iopub.execute_input":"2024-09-28T19:52:41.076598Z","iopub.status.idle":"2024-09-28T19:52:41.083931Z","shell.execute_reply.started":"2024-09-28T19:52:41.076561Z","shell.execute_reply":"2024-09-28T19:52:41.082585Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# automatic hyperparameter optimization with optuna, finding best classifier.\n\ndef objective(trial):\n\n    classifier = trial.suggest_categorical(\"classifier\", [\"RandomForest\", \"SVC\", \"KNN\"])\n\n    if classifier == \"RandomForest\":\n        n_estimators = trial.suggest_int(\"n_estimators\", 50, 500)\n        max_depth = trial.suggest_int(\"max_depth\", 10, 50)\n\n        clf = Pipeline(steps = [('tree_transformer', tree_transformer),('rf', RandomForestClassifier( n_estimators=n_estimators, max_depth=max_depth, random_state=1234))]) \n    elif classifier == \"SVC\":\n        c = trial.suggest_float(\"svc_c\", 1e-10, 1e10, log=True)\n        \n        clf = Pipeline(steps = [('line_transform', line_transformer),('svc', SVC(C=c, gamma=\"auto\"))])\n    else:\n        \n        n_neighbors = trial.suggest_int(\"n_neighbors\", 5, 15)\n        clf = Pipeline(steps = [('knn_transformer', knn_transformer),('knn', KNeighborsClassifier(n_neighbors = n_neighbors))])\n        \n    return cross_val_score(\n        clf, X, y, n_jobs=-1, cv=5\n    ).mean()\n\n\nstudy = optuna.create_study(direction=\"maximize\")\nstudy.optimize(objective, n_trials=200)\n\ntrial = study.best_trial\n\nprint(\"Accuracy: {}\".format(trial.value))\nprint(\"Best hyperparameters: {}\".format(trial.params))","metadata":{"execution":{"iopub.status.busy":"2024-09-28T19:52:41.416239Z","iopub.execute_input":"2024-09-28T19:52:41.416676Z","iopub.status.idle":"2024-09-28T20:22:55.034576Z","shell.execute_reply.started":"2024-09-28T19:52:41.416636Z","shell.execute_reply":"2024-09-28T20:22:55.03326Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"#### **`As we can see best accuracy is 0.81 on SVC model.`**","metadata":{}},{"cell_type":"code","source":"line_transformer = ColumnTransformer(\n    [\n        ('cat_feature', OneHotEncoder(handle_unknown='ignore',drop = 'first'), categorical),\n        ('num_feature', StandardScaler(), numerical)\n    ]\n)\n\nclf = Pipeline(steps = [('line_transform', line_transformer),('svc', SVC(C=1.2794424403730429, gamma=\"auto\"))])\n\nclf.fit(X,y)\n\n","metadata":{"execution":{"iopub.status.busy":"2024-09-28T20:23:28.008237Z","iopub.execute_input":"2024-09-28T20:23:28.008737Z","iopub.status.idle":"2024-09-28T20:23:28.076661Z","shell.execute_reply.started":"2024-09-28T20:23:28.008692Z","shell.execute_reply":"2024-09-28T20:23:28.075212Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# importing test data set\n\ndf_test = pd.read_csv('/kaggle/input/titanic/test.csv')\ndf_test.head()","metadata":{"execution":{"iopub.status.busy":"2024-09-28T20:23:29.88475Z","iopub.execute_input":"2024-09-28T20:23:29.885219Z","iopub.status.idle":"2024-09-28T20:23:29.912497Z","shell.execute_reply.started":"2024-09-28T20:23:29.885165Z","shell.execute_reply":"2024-09-28T20:23:29.911263Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# define ids\n\nids = df_test['PassengerId']\nids","metadata":{"execution":{"iopub.status.busy":"2024-09-28T20:23:30.543921Z","iopub.execute_input":"2024-09-28T20:23:30.544373Z","iopub.status.idle":"2024-09-28T20:23:30.554005Z","shell.execute_reply.started":"2024-09-28T20:23:30.544331Z","shell.execute_reply":"2024-09-28T20:23:30.552887Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# delete columns that won't be used for analyze\n\ndf_test = df_test.drop(['PassengerId', 'Name', 'Ticket', 'Cabin'], axis = 1)","metadata":{"execution":{"iopub.status.busy":"2024-09-28T20:23:31.610861Z","iopub.execute_input":"2024-09-28T20:23:31.611805Z","iopub.status.idle":"2024-09-28T20:23:31.618562Z","shell.execute_reply.started":"2024-09-28T20:23:31.611754Z","shell.execute_reply":"2024-09-28T20:23:31.617126Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df_test.info()","metadata":{"execution":{"iopub.status.busy":"2024-09-28T20:23:32.162876Z","iopub.execute_input":"2024-09-28T20:23:32.163354Z","iopub.status.idle":"2024-09-28T20:23:32.178402Z","shell.execute_reply.started":"2024-09-28T20:23:32.163308Z","shell.execute_reply":"2024-09-28T20:23:32.176883Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# filling missing values with median\n\ndf_test['Age'] = df_test['Age'].fillna(df_test['Age'].median())\n\ndf_test['Fare'] = df_test['Fare'].fillna(df_test['Fare'].median())","metadata":{"execution":{"iopub.status.busy":"2024-09-28T20:23:32.814869Z","iopub.execute_input":"2024-09-28T20:23:32.815362Z","iopub.status.idle":"2024-09-28T20:23:32.824547Z","shell.execute_reply.started":"2024-09-28T20:23:32.815316Z","shell.execute_reply":"2024-09-28T20:23:32.823223Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# define features and predicting target \n\nX_test = df_test\ny = clf.predict(X_test)\ny","metadata":{"execution":{"iopub.status.busy":"2024-09-28T20:23:33.542772Z","iopub.execute_input":"2024-09-28T20:23:33.543345Z","iopub.status.idle":"2024-09-28T20:23:33.571271Z","shell.execute_reply.started":"2024-09-28T20:23:33.543279Z","shell.execute_reply":"2024-09-28T20:23:33.57012Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df_output = pd.DataFrame({'PassengerId': ids.values, 'Survived': y})\ndf_output","metadata":{"execution":{"iopub.status.busy":"2024-09-28T20:23:34.387378Z","iopub.execute_input":"2024-09-28T20:23:34.38783Z","iopub.status.idle":"2024-09-28T20:23:34.401548Z","shell.execute_reply.started":"2024-09-28T20:23:34.387785Z","shell.execute_reply":"2024-09-28T20:23:34.400061Z"},"trusted":true},"outputs":[],"execution_count":null}]}